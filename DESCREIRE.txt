Popa Ramona 332CB

Rezolvarea temei contine varianta paralela si pe cea seriala, fara varianta optimizata.
Pentru a rezolva tema am parcurs urmatorii pasi esentiali:
-citire scriere in/din fisier
-calculez vectorul distantelor minime
-calculez vectorul ce contine numarul de aparitii ale fiecarei culori politice
-calculez maximul dintre minimele dupa formula dmin((i,j), Cmax) = max(dmin(i,j), Ck)  , cu 0<=k<Nc

pentru a rula tema am folosit urmatoarele comenzi:
1. make
2. bash script.sh numar_saptamani fisier_intrare Fisier_iesire numar_threaduri chunk

Am verificat tema pe toate fisierele de test comparand fisierul meu de iesire cu cel primit folosind comanda: diff -Bw fis1 fis2

Algoritm SECVENTIAL:


-int distanta -> calculeaza distanta maxima dintre senatori
-void print -> functia de printare am practic doua matrici cu care lucrez
-in main : 
Am facut citirea/scrierea din fisier
Am declarat doua matrici mat_act ,mat_temp; cu care am procedat astfel : Am doua matrici matrix[0][i][j] si mat[1][i][j] unde matrix [0] si matrix[1] se schimba intre ele cu ajutorul variabilei mat_act si mat_temp (jonglez cu ele)
Am completat vectorii dist_minima si nr_culori care reprezinta distanta minima in saptamana SAPT, de la senatorul (i,j) la orice alt senator de culoarea politica Ck , respectiv numarul de aparitii ale unei culori politice. Initial numarul de culori din vector este zero urmand sa fie incrementat pe parcurs iar distanta maxima este 3200 (aleasa de mine) ,urmand sa fie calculata.
Am aflat maximul dintre minime (In cazul in care am avut doua maxime egale am ales maximul in functie de indicele minim)

Algoritm PARALEL:

Pentru varianta paralela am paralelizat atat calculul noilor culori politice, cat si “numararea” senatorilor cu fiecare culoare, dupa fiecare saptamana (thredurile vor folosi aceeasi matrice si culori -> shared)

Am testat tema atat pe fep.grid.pub.ro (conectndu-ma cu putty) cat si pe calculatorul personal obtinand urmatoarele rezultate:

Pe fep:
./serial 60 in 50_7 out => 0m6.38
in50_7 e fisier de intrare cu N=50 si Nc=7 iar out este pentru 60 de saptamani

bash script.sh 60 in50_7 out paralel 1 1 => 6.52 timp real
bash script.sh 60 in50_7 out paralel 1 2 => 6.72
bash script.sh 60 in50_7 out paralel 1 10 => 6.50
bash script.sh 60 in50_7 out paralel 2 1 => 3.43
bash script.sh 60 in50_7 out paralel 2 2 => 3.43
bash script.sh 60 in50_7 out paralel 2 10 => 4.05
de la 4 in sus am acelasi rezultat, nu mai scaleaza deci am 2 coruri pe fep 

=> speedup de 1.8

time ./serial in100_20 out => 1m35.6
in100_20 e fisier de intrare cu N=100 si Nc=20 iar out este pentru 60 de saptamani

bash script.sh 60 in100_20 out paralel 1 1 =>1m39.18
bash script.sh 60 in100_20 out paralel 1 5 =>1m38.49
bash script.sh 60 in100_20 out paralel 2 1 =>0m50.29
bash script.sh 60 in100_20 out paralel 2 5 =>1m7
--------------------------

Pe calculatorul personal : 
Cu un sistem de operare ubuntu versiunea 13.04 kernel "Linux ubuntu 3.8.0-29-generic #42~precise1-Ubuntu SMP Wed Aug 14 16:19:23 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux"
Procesor Intel Core i5, dimensiune Cache procesor 3MB, doua coruri, 4 threaduri
compilator : gcc version 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5)

in50_7 e fisier de intrare cu N=50 si Nc=7 iar out este pentru 60 de saptamani

bash script.sh 60 in50_7 out paralel 1 1 =>0m3.707s
bash script.sh 60 in50_7 out paralel 1 2 =>0m3.722s
bash script.sh 60 in50_7 out paralel 1 5 =>0m3.723s
bash script.sh 60 in50_7 out paralel 1 10 =>0m3.737s
bash script.sh 60 in50_7 out paralel 2 1 =>0m2.036s
bash script.sh 60 in50_7 out paralel 2 2 =>0m2.202s
bash script.sh 60 in50_7 out paralel 2 5 =>0m2.062s
bash script.sh 60 in50_7 out paralel 2 10 =>0m2.443s
bash script.sh 60 in50_7 out paralel 4 1 =>0m1.918s
bash script.sh 60 in50_7 out paralel 4 2 =>0m1.822s
bash script.sh 60 in50_7 out paralel 4 5 =>0m1.996
bash script.sh 60 in50_7 out paralel 4 10 =>0m2.138s

in100_20 e fisier de intrare cu N=100 si Nc=20 iar out este pentru 100 de saptamani

bash script.sh 100 in100_20 out paralel 1 1 => 1m33.481s
bash script.sh 100 in100_20 out paralel 1 2 => 	1m33.493s
bash script.sh 100 in100_20 out paralel 1 5 => 	1m33.694s
bash script.sh 100 in100_20 out paralel 1 10 => 1m33.607s
bash script.sh 100 in100_20 out paralel 2 1 => 0m50.037s
bash script.sh 100 in100_20 out paralel 2 2 => 0m50.423s
bash script.sh 100 in100_20 out paralel 2 5 => 0m50.484s
bash script.sh 100 in100_20 out paralel 2 10 => 0m51.933s
bash script.sh 100 in100_20 out paralel 4 1 => 0m44.036s
bash script.sh 100 in100_20 out paralel 4 2 => 0m44.278s
bash script.sh 100 in100_20 out paralel 4 5 =>0m44.211s
bash script.sh 100 in100_20 out paralel 4 10 => 0m46.218s

time ./serial 100 in100_20 out => 1m30.117s

speedup = 1.80

CERINTELE INITIALE SUNT:


1. Introducere. Descrierea problemei

In urma unei revolutii, maretul dictator al republicii Latveria a fost alungat din tara si in locul 
lui s-a incercat instaurarea democratiei. S-au infiintat mai multe partide politice si fiecare si-a 
numit un numar de senatori. In fiecare zi senatul se intruneste intr-o sala in care senatorii sunt 
asezati intr-o matrice de dimensiune NxN, fiecare scaun din sala ocupand un element din matrice. 
Un senator are o pozitie fixa (i,j) in sala, adica se afla pe linia i si coloana j din matricea de scaune.

Din pacate senatorii nu erau multumiti de culoarea lor politica (partidul din care faceau parte) asa
 ca la inceput isi schimbau preferintele intr-un mod haotic. Din aceasta cauza, presedintele senatului
 a introdus un set de reguli. Culoarea politica a unui senator este notata cu Ck pentru 0<k<Nc,
 unde Nc reprezinta numarul maxim de partide (culori) politice. Se accepta schimbarea partidului politic,
 dar numai daca se respecta urmatoarele reguli: 

R1 : Fiecare senator poate avea o singura culoare politica pe parcursul unei saptamani

R2 : In fiecare saptamana, un senator are dreptul (si obligatia) sa-si schimbe culoarea politica,
 dar trebuie sa respecte regula R3.

R3 : Noua culoare politica a unui senator (i,j) este acea culoare Ck a altui senator de pe pozitia (i',j'),
 cu proprietatea ca (i',j') este cel mai apropiat senator de culoarea Ck de (i,j), iar (i',j') se gaseste 
 la distanta mai mare fata de (i,j) decat cel mai apropiat senator de orice alta culoare Cm pentru 
 orice m, cu 0<m<Nc, iar m!=k. Senatorii (i, j) si (i', j') trebuie sa fie neaparat diferiti - dar e posibil
 ca Ck sa coincida cu vechea culoare a senatorului (i,j)) Daca la un pas nu exista senatori dintr-o anumita culoare,
 atunci acel partid este desfiintat si nu va mai fi luat in considerare in saptamana urmatoare.

Explicatie formala R3:

Pentru un anumit senator (i,j)

Fie dmin((i,j), Ck) = distanta minima in saptamana SAPT, de la senatorul (i,j) la orice senator de culoarea 
politica Ck (fie (i', j') acest senator; senatorii (i,j) si (i',j') trebuie sa fie diferiti), pentru 0<=k<Nc;

Se va calcula cate o distanta dmin pentru fiecare culoare politica Ck, disponibila in saptamana SAPT.

Daca o culoare politica Ck nu mai exista in saptamana SAPT, sau singurul senator de culoarea Ck este chiar 
senatorul (i,j), puteti considera, pentru simplitate, dmin((i,j), Ck)=0.

Fie Cmax, culoarea politica pentru care: dmin((i,j), Cmax) = max0<=k<Nc, (dmin(i,j), Ck) (daca sunt mai
 multe culori politice care indeplinesc conditia, se va considera culoarea cu indicele minim)

Cmax va fi culoarea senatorului (i,j) in saptamana SAPT+1.

R4: Distanta intre doi senatori (i,j) si (i',j') se considera max(|i-i'| , |j-j'|).

R5: Senatorii actioneaza simultan, astfel:
a) intai fiecare senator calculeaza noua sa culoare politica
b) apoi, fiecare senator se inscrie in partidul cu noua culoare politica pe care a calculat-o

(Pentru a simula acest comportament, folositi doua zone de memorie diferite pentru a modela configuratiile din
 doua saptamani consecutive)

Numim configuratie matricea care contine culorile politice ale senatorilor intr-o anumita saptamana. 
Configuratia initiala corespunde finalului saptamanii 0, respectiv inceputului saptamanii 1. In configuratia
 initiala, sunt disponibile Nc culori politice si vi se garanteaza ca fiecare culoare este intalnita la cel 
 putin doi senatori (cu trecerea timpului, e posibil ca unele partide sa se desfiinteze, insa in virtutea
 democratiei, vor exista mereu cel putin 2 partide/culori). Trecerea dintr-o configuratie in alta se face
 conform regulilor de mai sus. Pentru a tine configuratia curenta si configuratia urmatoare se vor folosi 2 zone
 de memorie(vezi si regula R5).

2. Cerintele temei

Veti simula un numar de S saptamani de schimbare a culorii politice a senatorilor 
(configuratia initiala este configuratia de la inceputul saptamanii 1, prima schimbare a culorilor/partidelor 
conform regulilor de mai sus este la finalul saptamanii 1 – voi veti simula transferurile intre partide de 
la saptamana 1 la finalul saptamanii S). Cum unele partide s-ar putea sa dispara, dupa fiecare saptamana 
veti retine(in paralel, la punctul 2 de mai jos) si afisa (intr-o regiune seriala) cati senatori fac parte 
din fiecare partid. La final afisati configuratia de la sfarsitul saptamanii S (vedeti si sectiunea cu formatul
 fisierelor de intrare si iesire).


Formatul fisierului de intrare este:

    pe prima linie numarul N, reprezentand latura salii senatului,

    pe urmatoarea linie numarul Nc, reprezentand numarul de partide (culori politice) care se afla initial in matrice

    incepand de pe a treia linie, matricea reprezentand configuratia initiala: N linii cu cate N elemente 
	fiecare (i=0,...,N-1 pt linii si i=0,...,N-1 pe coloane)

Rezultatele (distributia senatorilor pe culori politice dupa fiecare iteratie + configuratia finala) se vor scrie 
intr-un fisier de iesire care are urmatorul format (cu N latura terenului pe care se afla senatorii iar X numarul de luni):

- S linii a cate Nc elemente, reprezentand numarul de senatori din fiecare culoare, de la finalul fiecarei saptamani

- o matrice cu N linii cu cate N elemente fiecare => configuratia la sfarsitul saptamanii S











